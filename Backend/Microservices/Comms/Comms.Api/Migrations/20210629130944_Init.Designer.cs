// <auto-generated />
using System;
using Comms.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Comms.Api.Migrations;

[DbContext(typeof(CommsContext))]
[Migration("20210629130944_Init")]
partial class Init
{
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("Relational:MaxIdentifierLength", 128)
            .HasAnnotation("ProductVersion", "6.0.0-preview.2.21154.2")
            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

        modelBuilder.Entity("Comms.Domain.Email", b =>
            {
                b.Property<Guid>("EmailId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Attempts")
                    .HasColumnType("int");

                b.Property<string>("Body")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Completed")
                    .HasColumnType("bit");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateSent")
                    .HasColumnType("datetime2");

                b.Property<Guid>("EmailQueueId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Errors")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("FromEmailAddress")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.HasKey("EmailId");

                b.HasIndex("EmailQueueId")
                    .IsUnique();

                b.ToTable("Emails");
            });

        modelBuilder.Entity("Comms.Domain.EmailQueue", b =>
            {
                b.Property<Guid>("EmailQueueId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<bool>("Completed")
                    .HasColumnType("bit");

                b.Property<DateTime?>("CompletedAt")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("EmailAddress")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<string>("IdentityHash")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Name")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<Guid?>("OwnedBy")
                    .HasColumnType("uniqueidentifier");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion");

                b.Property<string>("Subject")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Username")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("EmailQueueId");

                b.HasIndex("UserId");

                b.ToTable("EmailQueue");
            });

        modelBuilder.Entity("Comms.Domain.Notification", b =>
            {
                b.Property<Guid>("NotificationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ContentImage")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<string>("ContentKey")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<string>("ContentMessage")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<bool>("Hidden")
                    .HasColumnType("bit");

                b.Property<DateTime?>("ReadAt")
                    .HasColumnType("datetime2");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int?>("UserLevel")
                    .HasColumnType("int");

                b.Property<string>("Username")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<DateTime?>("ViewedAt")
                    .HasColumnType("datetime2");

                b.HasKey("NotificationId");

                b.ToTable("Notifications");
            });

        modelBuilder.Entity("Comms.Domain.NotificationEntry", b =>
            {
                b.Property<Guid>("EntryId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<bool>("Deleted")
                    .HasColumnType("bit");

                b.Property<Guid>("NotificationId")
                    .HasColumnType("uniqueidentifier");

                b.Property<bool>("Sent")
                    .HasColumnType("bit");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid?>("UserSettingUserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("EntryId");

                b.HasIndex("NotificationId");

                b.HasIndex("UserSettingUserId");

                b.ToTable("NotificationEntries");
            });

        modelBuilder.Entity("Comms.Domain.Sms", b =>
            {
                b.Property<Guid>("SmsId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateSent")
                    .HasColumnType("datetime2");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.Property<string>("Mobile")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<bool>("Sent")
                    .HasColumnType("bit");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("SmsId");

                b.ToTable("Sms");
            });

        modelBuilder.Entity("Comms.Domain.UserSetting", b =>
            {
                b.Property<Guid>("UserId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Email")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)");

                b.Property<bool>("Marketing")
                    .HasColumnType("bit");

                b.Property<Guid?>("MarketingOptOutKey")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<bool>("PictureApproved")
                    .HasColumnType("bit");

                b.Property<bool>("PictureLiked")
                    .HasColumnType("bit");

                b.Property<bool>("PictureUnapproved")
                    .HasColumnType("bit");

                b.Property<string>("Username")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("UserId");

                b.ToTable("UserSettings");
            });

        modelBuilder.Entity("Comms.Domain.Email", b =>
            {
                b.HasOne("Comms.Domain.EmailQueue", "EmailQueue")
                    .WithOne("Email")
                    .HasForeignKey("Comms.Domain.Email", "EmailQueueId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("EmailQueue");
            });

        modelBuilder.Entity("Comms.Domain.EmailQueue", b =>
            {
                b.HasOne("Comms.Domain.UserSetting", "User")
                    .WithMany()
                    .HasForeignKey("UserId");

                b.Navigation("User");
            });

        modelBuilder.Entity("Comms.Domain.NotificationEntry", b =>
            {
                b.HasOne("Comms.Domain.Notification", "Notification")
                    .WithMany("Entries")
                    .HasForeignKey("NotificationId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Comms.Domain.UserSetting", null)
                    .WithMany("NotificationEntries")
                    .HasForeignKey("UserSettingUserId");

                b.Navigation("Notification");
            });

        modelBuilder.Entity("Comms.Domain.EmailQueue", b =>
            {
                b.Navigation("Email");
            });

        modelBuilder.Entity("Comms.Domain.Notification", b =>
            {
                b.Navigation("Entries");
            });

        modelBuilder.Entity("Comms.Domain.UserSetting", b =>
            {
                b.Navigation("NotificationEntries");
            });
#pragma warning restore 612, 618
    }
}
