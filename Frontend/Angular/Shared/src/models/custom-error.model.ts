import { pascalToScores } from '@shared/functions';

import { Trx } from './trx.model';

export enum ErrorCode {
    HttpError = -400,
    HttpUnauthorized = -401,
    HttpForbidden = -403,
    HttpNotfound = -404,
    ApiOffline = -1,
    Default = 0,
    MissingEntity,
    IncorrectUsernameOrPassword,
    IncorrectPassword,
    AccountDisabled,
    AccountLocked,
    SessionHasExpired,
    EmailConfirmationRequired,
    TwoFactorAttemptFailed,
    ProvidedCodeInvalid,
    ProvidedKeyInvalid,
    KeyExpiredOrInvalid,
    CannotReUseCode,
    TwoFactorAlreadyEnabled,
    EmailInUse,
    UsernameTaken,
    InvalidUsername,
    TwoFactorTypeUnset,
    EmailRegisteredByExternalProvider,
    InvalidUserClaims,
    MissingPermissions,
    InvalidModelRequest,
    ReCaptchaFailed,
    EntityNotFound,
    EntitiesAreNotTheSame,
    UploadNotAllowed,
    DuplicatePicture,
    DangerousPicture,
    NoLocationFound,
    PictureModified,
    PictureAlreadySubmitted,
    PictureAlreadyLive,
    PictureAlreadyProcessed,
    PathNotFound,
    DailyUploadLimitReached,
    UploadWouldExceedDailyLimit,
    DraftLimitReached,
    UploadWouldExceedDraftLimit,
    PictureRequired,
    FailedToDecodeJson,
    FailedToLookupCoords,
    FailedToGetCountry,
    SmsAlreadySent,
    SmsFailedToSend,
    ReportAlreadyActioned,
    InvalidPictureExtension,
    PictureTooBig,
    PictureDimensionsTooSmall,
    MissingExifLocation,
    MissingExifTimestamp,
    TokenInvalid,
    WrongExternalProvider,
    ExternalProviderLoginFailed,
    ExternalProviderUnverifiedEmail,
}

export class CustomError extends Trx {
    constructor(public code?: ErrorCode, public params?: any, public message?: string) {
        super(`error_codes.${pascalToScores(ErrorCode[code])}`, params, message);
    }
}
